var fs = require('fs-extra');
var path = require('path');

if (process.argv.length > 4) {
  console.log(`Usage: node vrs-convert.js [source.vrs] [result.json]`);
  console.log(`where\nsource.vrs is the Paratext .vrs file (eng.vrs, etc.)`);
  console.log(
    `result.json is the json file to contain the verses for each chapter`
  );
}
var sourceFlnm =
  process.argv.length > 2
    ? process.argv[2]
    : path.join('C:/My Paratext 9 Projects', 'eng.vrs');
var vrsName =
  process.argv.length > 3
    ? process.argv[3]
    : path.join(__dirname, '..', 'src', 'assets', 'eng-vrs.js');
console.log(`source: ${sourceFlnm},\nresult: ${vrsName}`);

var result = new Map(); // {book: [verses, ...], ...}
var filename = path.join(__dirname, '..', '..', sourceFlnm);
if (!fs.existsSync(filename)) filename = sourceFlnm;
if (!fs.existsSync(filename)) console.log(`unable to make reuslts`, sourceFlnm);
else {
  var sourceContent = fs.readFileSync(filename, 'utf-8');
  sourceContent.split('\n').forEach((line) => {
    if (/[a-z1-4]/i.test(line.slice(0, 1)) && !line.includes('=')) {
      try {
        var book = line.slice(0, 3).toUpperCase();
        var chaps = new Map(); // {chapter: verses, ...}
        var match = line.match(/(\d+:\d+)+/g);
      } catch (e) {
        console.log(`Error: ${e.message} in line: ${line}`);
      }
      if (match) {
        for (var m of match) {
          var [ch, vs] = m.split(':');
          chaps.set(parseInt(ch), parseInt(vs));
        }
      }
      result.set(
        book,
        Array.from(chaps)
          .sort((a, b) => a[0] - b[0])
          .map((a) => a[1])
      );
    }
  });
}

const header = `/* eslint-disable import/no-anonymous-default-export */
// This file is generated by vrs-convert.js
export default `;
var res = Array.from(result).map((a) => `["${a[0]}", [${a[1].join(', ')}]]`);
fs.writeFileSync(vrsName, header + `[${res.join(',\n')}]\n`, 'utf-8');
