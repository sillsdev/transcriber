'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.default = void 0;

var _main = _interopRequireDefault(require('./main'));

var _evented = _interopRequireDefault(require('./evented'));

var _exception = require('./exception');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var __decorate =
  (void 0 && (void 0).__decorate) ||
  function (decorators, target, key, desc) {
    var c = arguments.length,
      r =
        c < 3
          ? target
          : desc === null
          ? (desc = Object.getOwnPropertyDescriptor(target, key))
          : desc,
      d;
    if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--) {
        if ((d = decorators[i]))
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

var assert = _main.default.assert;
/**
 * Logs track a series of unique events that have occurred. Each event is
 * tracked based on its unique id. The log only tracks the ids but currently
 * does not track any details.
 *
 * Logs can automatically be persisted by assigning them a bucket.
 */

var Log =
  /*#__PURE__*/
  (function () {
    function Log() {
      var options =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this._name = options.name;
      this._bucket = options.bucket;

      if (this._bucket) {
        assert('Log requires a name if it has a bucket', !!this._name);
      }

      this._reify(options.data);
    }

    var _proto = Log.prototype;

    _proto.append = function append() {
      var _this = this;

      for (
        var _len = arguments.length, ids = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        ids[_key] = arguments[_key];
      }

      return this.reified
        .then(function () {
          Array.prototype.push.apply(_this._data, ids);
          return _this._persist();
        })
        .then(function () {
          _this.emit('append', ids);
        });
    };

    _proto.before = function before(id) {
      var relativePosition =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var index = this._data.indexOf(id);

      if (index === -1) {
        throw new _exception.NotLoggedException(id);
      }

      var position = index + relativePosition;

      if (position < 0 || position >= this._data.length) {
        throw new _exception.OutOfRangeException(position);
      }

      return this._data.slice(0, position);
    };

    _proto.after = function after(id) {
      var relativePosition =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var index = this._data.indexOf(id);

      if (index === -1) {
        throw new _exception.NotLoggedException(id);
      }

      var position = index + 1 + relativePosition;

      if (position < 0 || position > this._data.length) {
        throw new _exception.OutOfRangeException(position);
      }

      return this._data.slice(position);
    };

    _proto.truncate = function truncate(id) {
      var _this2 = this;

      var relativePosition =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var removed;
      return this.reified
        .then(function () {
          var index = _this2._data.indexOf(id);

          if (index === -1) {
            throw new _exception.NotLoggedException(id);
          }

          var position = index + relativePosition;

          if (position < 0 || position > _this2._data.length) {
            throw new _exception.OutOfRangeException(position);
          }

          if (position === _this2._data.length) {
            removed = _this2._data;
            _this2._data = [];
          } else {
            removed = _this2._data.slice(0, position);
            _this2._data = _this2._data.slice(position);
          }

          return _this2._persist();
        })
        .then(function () {
          _this2.emit('truncate', id, relativePosition, removed);
        });
    };

    _proto.rollback = function rollback(id) {
      var _this3 = this;

      var relativePosition =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var removed;
      return this.reified
        .then(function () {
          var index = _this3._data.indexOf(id);

          if (index === -1) {
            throw new _exception.NotLoggedException(id);
          }

          var position = index + 1 + relativePosition;

          if (position < 0 || position > _this3._data.length) {
            throw new _exception.OutOfRangeException(position);
          }

          removed = _this3._data.slice(position);
          _this3._data = _this3._data.slice(0, position);
          return _this3._persist();
        })
        .then(function () {
          _this3.emit('rollback', id, relativePosition, removed);
        });
    };

    _proto.clear = function clear() {
      var _this4 = this;

      var clearedData;
      return this.reified
        .then(function () {
          clearedData = _this4._data;
          _this4._data = [];
          return _this4._persist();
        })
        .then(function () {
          return _this4.emit('clear', clearedData);
        });
    };

    _proto.contains = function contains(id) {
      return this._data?.indexOf(id) > -1;
    };

    _proto._persist = function _persist() {
      this.emit('change');

      if (this.bucket) {
        return this._bucket.setItem(this.name, this._data);
      } else {
        return Promise.resolve();
      }
    };

    _proto._reify = function _reify(data) {
      var _this5 = this;

      if (!data && this._bucket) {
        this.reified = this._bucket
          .getItem(this._name)
          .then(function (bucketData) {
            return _this5._initData(bucketData);
          });
      } else {
        this._initData(data);

        this.reified = Promise.resolve();
      }
    };

    _proto._initData = function _initData(data) {
      if (data) {
        this._data = data;
      } else {
        this._data = [];
      }
    };

    _createClass(Log, [
      {
        key: 'name',
        get: function () {
          return this._name;
        },
      },
      {
        key: 'bucket',
        get: function () {
          return this._bucket;
        },
      },
      {
        key: 'head',
        get: function () {
          return this._data[this._data.length - 1];
        },
      },
      {
        key: 'entries',
        get: function () {
          return this._data;
        },
      },
      {
        key: 'length',
        get: function () {
          return this._data.length;
        },
      },
    ]);

    return Log;
  })();

Log = __decorate([_evented.default], Log);
var _default = Log;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
